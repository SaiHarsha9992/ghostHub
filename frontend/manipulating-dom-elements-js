<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manipulating DOM Elements</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&display=swap');

        html, body {
            overflow-y: scroll;
            overflow-x: hidden;
            scrollbar-width: none;
            font-family: 'Space Grotesk', sans-serif;
            line-height: 1.6;
            color: #E0E0E0;
            background-color: #0B0F11;
            margin: 0;
            padding: 0;
            min-height: 100vh;
        }
        
        html::-webkit-scrollbar, 
        body::-webkit-scrollbar {
            display: none;
        }
            
        .content-wrapper {
            max-width: 900px;
            margin: auto;
            padding: 20px;
        }

        h1, h2, h3 {
            color: #F0F0F0;
            font-weight: 700;
            text-align: left;
            margin-bottom: 15px;
            margin-top: 30px;
        }

        h1 {
            text-align: center;
            margin-bottom: 40px;
            font-size: 2.5em;
        }

        .section-heading {
            font-size: 1.8em;
            border-bottom: 1px solid #333;
            padding-bottom: 10px;
            margin-top: 40px;
        }

        p {
            margin-bottom: 15px;
        }

        .introduction, .section-content, .conclusion {
            background-color: #0B0F11;
            padding: 0;
            border-radius: 0;
            box-shadow: none;
            margin-bottom: 20px;
        }

        .intro-text {
            border-left: 5px solid #00A6FF;
            padding-left: 15px;
        }

        pre {
            background-color: #282c34;
            color: #abb2bf;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        code {
            font-family: 'Courier New', Courier, monospace;
        }

        ul {
            list-style-type: 'ü§ñ';
            padding-left: 20px;
            margin-bottom: 15px;
        }

        li {
            padding-left: 10px;
            margin-bottom: 5px;
        }

        .real-life-example {
            background-color: #0B0F11;
            border-left: 4px solid #ff9933;
            padding-left: 10px;
            margin-bottom: 20px;
        }
        
        .real-life-example ul {
            list-style-type: 'üí°';
        }

        .conclusion {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #333;
        }

        .resources ul {
            list-style-type: 'üìù';
            padding: 0;
        }
        
        .resources ul li::before {
            content: none;
        }

        .resources li {
            background-color: #1E242B;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
            list-style-type: none;
        }
    </style>
</head>
<body>

    <div class="content-wrapper">
        <h1 class="section-heading">Manipulating DOM Elements</h1>

        <div class="introduction">
            <h2 class="section-heading">1. Introduction</h2>
            <div class="intro-text">
                <p>Once you‚Äôve selected elements in the DOM, you can manipulate their content, styles, and classes to create dynamic, interactive web pages. JavaScript provides simple methods and properties for this.</p>
            </div>
        </div>

        <div class="section-content">
            <h2 class="section-heading">2. Manipulating Content</h2>
            <h3>(A) textContent</h3>
            <p>‚óè Changes the text of an element</p>
            <pre><code>let heading = document.querySelector("h1");
heading.textContent = "Welcome to JavaScript DOM!";</code></pre>
            <h3>(B) innerHTML</h3>
            <p>‚óè Changes the HTML content inside an element</p>
            <pre><code>let div = document.querySelector("#container");
div.innerHTML = "&lt;p&gt;This is a new paragraph!&lt;/p&gt;";</code></pre>
            <h3>(C) innerText</h3>
            <p>‚óè Similar to <code>textContent</code> but respects CSS styling and hidden elements</p>
            <pre><code>let paragraph = document.querySelector("p");
paragraph.innerText = "Updated paragraph text";</code></pre>
        </div>
        
        <div class="section-content">
            <h2 class="section-heading">3. Manipulating Styles</h2>
            <h3>(A) Inline Styles</h3>
            <pre><code>let heading = document.querySelector("h1");
heading.style.color = "blue";
heading.style.fontSize = "30px";
heading.style.backgroundColor = "yellow";</code></pre>
            <h3>(B) Using CSS Variables</h3>
            <pre><code>document.documentElement.style.setProperty('--main-color', 'green');</code></pre>
            <h3>(C) Style Properties</h3>
            <p>‚óè Common properties: <code>color</code>, <code>backgroundColor</code>, <code>fontSize</code>, <code>display</code>, <code>margin</code>, <code>padding</code></p>
        </div>

        <div class="section-content">
            <h2 class="section-heading">4. Manipulating Classes</h2>
            <h3>(A) classList.add()</h3>
            <pre><code>let div = document.querySelector("#container");
div.classList.add("active");</code></pre>
            <h3>(B) classList.remove()</h3>
            <pre><code>div.classList.remove("active");</code></pre>
            <h3>(C) classList.toggle()</h3>
            <pre><code>div.classList.toggle("active"); // Adds if not present, removes if present</code></pre>
            <h3>(D) classList.contains()</h3>
            <pre><code>if(div.classList.contains("active")) {
    console.log("Div is active");
}</code></pre>
        </div>

        <div class="section-content">
            <h2 class="section-heading">5. Mini-Practice Tasks üìù</h2>
            <div class="resources">
                <ul>
                    <li>Select an <code>&lt;h1&gt;</code> and change its text using <code>textContent</code> and <code>innerHTML</code>.</li>
                    <li>Change the background color and font size of a <code>&lt;div&gt;</code> using <code>style</code>.</li>
                    <li>Add a class to a <code>&lt;p&gt;</code> element and then remove it.</li>
                    <li>Toggle a class on a <code>&lt;button&gt;</code> click to show/hide content.</li>
                    <li>Check if a specific class exists on an element and log a message.</li>
                </ul>
            </div>
        </div>

        <div class="section-content">
            <h2 class="section-heading">6. Advantages ‚úÖ</h2>
            <ul>
                <li>Makes web pages dynamic and interactive</li>
                <li>Can update content without reloading the page</li>
                <li>Easily modify styles and classes for animations, themes, or responsive behavior</li>
                <li>Works with events for user interactions</li>
            </ul>
        </div>
        
        <div class="section-content">
            <h2 class="section-heading">7. Disadvantages ‚ùå</h2>
            <ul>
                <li>Inline styles can override CSS rules and make code harder to maintain</li>
                <li>Excessive DOM manipulation can slow down performance on large pages</li>
                <li>Overusing class toggles without planning can lead to confusing CSS behavior</li>
            </ul>
        </div>

        <div class="conclusion">
            <h2 class="section-heading">8. Conclusion</h2>
            <ul>
                <li>Use <code>textContent</code>, <code>innerText</code>, and <code>innerHTML</code> to manipulate content</li>
                <li>Use <code>style</code> to change inline styles dynamically</li>
                <li>Use <code>classList</code> methods (<code>add</code>, <code>remove</code>, <code>toggle</code>, <code>contains</code>) to control CSS classes</li>
                <li>Mastering DOM manipulation is key to building interactive and responsive web pages</li>
            </ul>
        </div>
    </div>
</body>
</html>
