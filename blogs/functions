<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Understanding Functions in Programming</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&display=swap');

        html, body {
            overflow-y: scroll;   /* keeps scroll functionality */
            overflow-x: hidden;
            scrollbar-width: none;  /* for Firefox */
            font-family: 'Space Grotesk', sans-serif;
            line-height: 1.6;
            color: #E0E0E0; /* Light gray for text */
            background-color: #0B0F11; /* Very dark background */
            margin: 0; /* Remove default body margin */
            padding: 0; /* Remove default body padding */
            min-height: 100vh; /* Ensure body takes at least full viewport height */
        }
        
        html::-webkit-scrollbar, 
        body::-webkit-scrollbar {
            display: none;   /* for Chrome, Safari, Edge */
        }

        .content-wrapper {
            max-width: 900px;
            margin: auto;
            padding: 20px;
        }

        h1, h2, h3 {
            color: #F0F0F0;
            font-weight: 700;
            text-align: left;
            margin-bottom: 15px;
            margin-top: 30px;
        }

        h1 {
            text-align: center;
            font-size: 2.5em;
        }

        .section-heading {
             font-size: 1.8em;
             border-bottom: 1px solid #333;
             padding-bottom: 10px;
             margin-top: 40px;
        }

        .intro-text {
            border-left: 5px solid #00A6FF;
            padding-left: 15px;
            margin-bottom: 20px;
        }
        
        .syntax-box {
            background-color: #1E242B;
            padding: 15px;
            border-left: 4px solid #ff9933;
            border-radius: 5px;
            margin-top: 15px;
            margin-bottom: 25px;
        }

        .image-container {
            text-align: center;
            margin: 20px 0;
        }

        .image-container img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        }

        .tab-container {
            overflow: hidden;
            border: 1px solid #333;
            background-color: #1A1E22;
            border-radius: 8px;
            margin-top: 15px;
            margin-bottom: 20px;
        }

        .tab-button {
            background-color: #1A1E22;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            color: #E0E0E0;
        }

        .tab-button:hover {
            background-color: #2A3138;
        }

        .tab-button.active {
            background-color: #2A3138;
            color: #fff;
        }

        .tab-content {
            display: none;
            padding: 6px 12px;
            border-top: none;
            background-color: #1E242B;
            border-radius: 0 0 8px 8px;
        }

        pre {
            background-color: #282c34;
            color: #abb2bf;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        code {
            font-family: 'Courier New', Courier, monospace;
        }

        ul {
            list-style-type: 'ðŸ§ '; /* Using a brain emoji for list style */
            padding-left: 20px;
            margin-bottom: 15px;
        }

        .application-list ul {
            list-style-type: 'âœ…';
        }

        .resources-list ul {
            list-style-type: none;
            padding: 0;
        }

        .resources-list li {
            background-color: #1E242B;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
        }

        .conclusion {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #333;
        }

        @media (max-width: 600px) {
            .tab-button {
                width: 100%;
                text-align: left;
            }
        }
    </style>
</head>
<body>

    <div class="content-wrapper">
        <h1>Understanding Functions in Programming</h1>

        <div class="introduction">
            <h2 class="section-heading">Introduction to Functions</h2>
            <div class="intro-text">
                <p>In programming, a **function** is a block of code that performs a specific task. Functions allow us to break down complex programs into smaller, manageable sections, making code more modular, reusable, and maintainable.</p>
                <p>Imagine you are a student, and every time you need to calculate the total marks for a subject, you do the same stepsâ€”add up the scores for assignments, exams, and quizzes. Instead of doing this manually every time, you write down the steps (which is the function) and just call it whenever you need to calculate the total. This makes your life easier because you donâ€™t have to repeat the process each time.</p>
       
                <p>In programming, instead of repeatedly rewriting the same code, we define functions to perform repetitive tasks and reuse them wherever necessary.</p>
            </div>
        </div>

        <div class="section-content">
            <h2 class="section-heading">Why Use Functions?</h2>
            <ul>
                <li><strong>Code Reusability:</strong> Write once, use many times.</li>
                <li><strong>Modular Code:</strong> Break large programs into smaller, easier-to-understand chunks.</li>
                <li><strong>Improved Readability:</strong> Functions make programs more organized and easy to follow.</li>
                <li><strong>Ease of Maintenance:</strong> Changes in functionality can be made in one place (inside the function) instead of multiple places in the code.</li>
            </ul>
        </div>

        <div class="section-content">
            <h2 class="section-heading">Defining and Using Functions</h2>
            <p>In any language, defining and calling a function follows a pattern.</p>
            <h3>Syntax:</h3>
            <p><strong>Function Definition:</strong> You define a function with a specific name and a block of code to be executed when the function is called.</p>
            <p><strong>Function Call:</strong> You execute the function by calling it from somewhere in the code.</p>
            <h3>General Function Syntax:</h3>
            <div class="syntax-box">
                <pre><code>&lt;return-type&gt; &lt;function-name&gt;(&lt;parameters&gt;) {
    // Function body
}</code></pre>
            </div>
        </div>
        
        <div class="section-content">
            <h2 class="section-heading">Examples of Functions</h2>
            <p>Let's see how functions are defined and used in four different programming languages.</p>
            <div class="tab-container">
                <button class="tab-button" onclick="openCode(event, 'c-function')">C</button>
                <button class="tab-button" onclick="openCode(event, 'cpp-function')">C++</button>
                <button class="tab-button" onclick="openCode(event, 'java-function')">Java</button>
                <button class="tab-button" onclick="openCode(event, 'python-function')">Python</button>
            </div>

            <div id="c-function" class="tab-content">
                <h3>C Language:</h3>
                <pre><code>#include &lt;stdio.h&gt;

// Function declaration
int square(int num);

int main() {
    int result = square(5); // Function call
    printf("Square: %d", result);
    return 0;
}

// Function definition
int square(int num) {
    return num * num;
}</code></pre>
            </div>

            <div id="cpp-function" class="tab-content">
                <h3>C++ Language:</h3>
                <pre><code>#include &lt;iostream&gt;
using namespace std;

// Function declaration
int square(int num);

int main() {
    int result = square(5); // Function call
    cout &lt;&lt; "Square: " &lt;&lt; result;
    return 0;
}

// Function definition
int square(int num) {
    return num * num;
}</code></pre>
            </div>
            
            <div id="java-function" class="tab-content">
                <h3>Java Language</h3>
                <pre><code>public class FunctionExample {
    // Function definition
    public static int square(int num) {
        return num * num;
    }

    public static void main(String[] args) {
        int result = square(5); // Function call
        System.out.println("Square: " + result);
    }
}</code></pre>
            </div>

            <div id="python-function" class="tab-content">
                <h3>Python Language</h3>
                <pre><code># Function definition
def square(num):
    return num * num

# Function call
result = square(5)
print("Square:", result)</code></pre>
            </div>
        </div>

        <div class="section-content">
            <h2 class="section-heading">Types of Functions</h2>
            <ul>
                <li><strong>Built-in Functions:</strong> Functions that come predefined with the programming language (e.g., `print()` in Python, `sqrt()` in math libraries).</li>
                <li><strong>User-Defined Functions:</strong> Functions that the programmer creates to meet specific needs in the program.</li>
            </ul>
        </div>
        
        <div class="section-content">
            <h2 class="section-heading">Parameters and Return Values</h2>
            <p><strong>Parameters (Arguments):</strong> Values you pass into a function. Functions can take multiple parameters or none at all.</p>
            <p><strong>Return Value:</strong> The value that the function sends back after executing.</p>
            <h3>Example (C)</h3>
            <div class="syntax-box">
                <pre><code>int multiply(int a, int b) {
    return a * b;
}</code></pre>
            </div>
            <p>Here, the function `multiply` takes two parameters `a` and `b`, multiplies them, and returns the result.</p>
        </div>

        <div class="section-content">
            <h2 class="section-heading">Real-Time Applications of Functions</h2>
            <div class="application-list">
                <ul>
                    <li><strong>Grade Calculation:</strong> Imagine you're working on a system to calculate the grade for a student based on their assignments, projects, and exams. You can define a function `calculateGrade()` that takes the student's scores as parameters and returns the final grade. This way, you don't have to manually calculate grades every time.</li>
                    <li><strong>Temperature Conversion:</strong> In a weather application, you can define a function to convert temperature values from Celsius to Fahrenheit. This function can be reused whenever temperature conversion is required.</li>
                    <li><strong>Financial Calculation:</strong> For personal finance management, you can write functions for calculating the total cost after applying discounts, tax calculations, or even calculating loan interest. This allows you to reuse these calculations across your application.</li>
                </ul>
            </div>
        </div>

        <div class="section-content">
            <h2 class="section-heading">Advanced Function Concepts</h2>
            <div class="application-list">
                <ul>
                    <li><strong>Recursion:</strong> A function that calls itself is known as a recursive function. Recursion is often used in problems that can be divided into smaller, similar subproblems (such as calculating factorials or traversing tree structures).</li>
                    <li><strong>Function Overloading (C++, Java):</strong> Some languages, like C++ and Java, support function overloading, which allows you to define multiple functions with the same name but different parameters.</li>
                    <li><strong>Anonymous Functions (Lambdas):</strong> In some languages, you can create anonymous functions (also called lambda functions) to pass around functions as arguments without giving them a name.</li>
                </ul>
            </div>
            <h3>Example in Python:</h3>
            <div class="syntax-box">
                <pre><code>multiply = lambda x, y: x * y
print(multiply(3, 4))</code></pre>
            </div>
        </div>
        

        
        <div class="conclusion">
            <h2>Conclusion</h2>
            <p>Functions are the building blocks of a well-structured program. By breaking down tasks into smaller, manageable pieces, functions help improve code reusability, readability, and maintainability. Whether you're performing simple calculations or designing complex software systems, understanding and utilizing functions is a key skill for every programmer.</p>
        </div>
    </div>

    <script>
        function openCode(evt, codeName) {
            var i, tabcontent, tabbuttons;
            tabcontent = evt.currentTarget.parentNode.parentNode.querySelectorAll('.tab-content');
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tabbuttons = evt.currentTarget.parentNode.querySelectorAll('.tab-button');
            for (i = 0; i < tabbuttons.length; i++) {
                tabbuttons[i].className = tabbuttons[i].className.replace(" active", "");
            }
            document.getElementById(codeName).style.display = "block";
            evt.currentTarget.className += " active";
        }

        document.addEventListener("DOMContentLoaded", function() {
            var tabContainers = document.querySelectorAll('.tab-container');
            tabContainers.forEach(function(container) {
                var firstButton = container.querySelector('.tab-button');
                if (firstButton) {
                    firstButton.click();
                }
            });
        });
    </script>

</body>
</html>
